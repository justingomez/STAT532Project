\documentclass[titlepage]{article}
\usepackage[utf8]{inputenc}
\usepackage{amsmath}
\usepackage{fullpage}
\usepackage{enumitem}
\usepackage{graphicx}
\usepackage{fancyhdr}
\usepackage{setspace}
\usepackage{titlesec}
\pagestyle{fancy}
\lhead{Justin Gomez}
\chead{STAT 532 Project}
\rhead{12/2016}
\setlength{\headheight}{20pt}
\renewcommand{\headrulewidth}{0.2pt}
\renewcommand{\footrulewidth}{0.2pt}
\setlength{\parindent}{0pt}
\begin{document}

<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
# set global chunk options
opts_chunk$set(echo=TRUE,results='markup',message=FALSE, comment=NA,warning=FALSE,tidy=TRUE,fig.width=6,fig.height=3.85)
@


Simulation
<<>>=
library(plyr)
library(LearnBayes)
library(tree)
num.sims<-1000
eps<-rnorm(num.sims,0,1)
Discretesample1<-function(n,m) { 
    sample(x=m,size=n,replace=TRUE) 
}
Discretesample2<-function(n,m) { 
    sample(x=m,size=n,replace=TRUE) 
}
set.seed(41493)
x1<-Discretesample1(num.sims,seq(1,10,1))
count(x1)
x2<-as.factor(Discretesample2(num.sims,c("A","B","C","D")))
count(x2)
fx <- ifelse(x1<=5.0 & x2=="A"|x2=="B", 8.0,
      ifelse(x1>5.0 & x2=="A"|x2=="B",  2.0,
      ifelse(x1<=3.0 & x2=="C"|x2=="D", 1.0,
      ifelse(3.0<x1 & x1<=7.0 & x2=="C"|x2=="D", 5.0,
      ifelse(x1>7.0 & x2=="C"|x2=="D", 8.0, NA)))))
y<-fx+2*eps
plot(y~x1)
boxplot(y~x2, xlab = "X2", ylab = "Y", border = "white")
points(y~x2,pch=1)

sim<-as.data.frame(cbind(y,x1,x2))

#simple case
num.sims.ind<-10
num.sims.tot<-10
alpha<-.5
mu<-mean(y)
nu<-10
lambda<-4
b<-rep(12,num.sims.tot)
#grow
#set.seed(2)
for(j in 1:num.sims.tot) {
  eta<-matrix(NA,nrow=50,ncol=4)
  eta[1,1]<-1
  m<-seq(min(x1)+1,max(x1)-1,1)
  n<-c("A,B","C,D")
  rho<-NULL
  node<-NULL
  for(i in 1:num.sims.ind) {
    if(runif(1)<alpha){
      node[i]<-sample(which(!is.na(eta[,1]) & is.na(eta[,2]) & is.na(eta[,4])),1) #node to split
      eta[which(is.na(eta[,1]))[1],3]<-node[i] #assign parent
      eta[which(is.na(eta[,1]))[1],1]<-which(is.na(eta[,1]))[1] #initiallize node (left)
      eta[which(is.na(eta[,1]))[1],3]<-node[i] #assign parent
      eta[which(is.na(eta[,1]))[1],1]<-which(is.na(eta[,1]))[1] #initiallize node (right)
      if(is.na(eta[1,2])) {
        rho[i]<-Discretesample2(1,n)
        eta[node[i],2]<-rho[i]
      }
      if(node[i]==2 | node[i]==3) {
        rho[i]<-Discretesample1(1,m)
        eta[node[i],2]<-rho[i]
      }
      if(node[i]!=2 & node[i]!=3 & node[i]!=1) {
        w<-as.numeric(eta[as.numeric(eta[node[i],3]),2])
        rho[i]<-Discretesample1(1,m)
        if(node[i]%%2==1) {
          while(as.numeric(rho[i])<w) {
            rho[i]<-Discretesample1(1,m)
          }
        }
        if(node[i]%%2==0) {
          while(as.numeric(rho[i])>=w) {
            rho[i]<-Discretesample1(1,m)
          }
        }
        eta[node[i],2]<-rho[i]
      }
      if(node[i]!=1) {
        if(as.numeric(eta[node[i],2])==max(m)) {
          eta[which(eta[,3]==node[i])[2],4]<-1
        }
        if(as.numeric(eta[node[i],2])==min(m)) {
          eta[which(eta[,3]==node[i])[1],4]<-1
        }
      }
    }
  }
  b[j]<-length(which(!is.na(eta[,1]) & is.na(eta[,2])))
}
eta
rho
node
b
@

ignore pruning
<<>>=
#prune
k<-matrix(NA,ncol=num.sims,nrow=50)
set.seed(1)
i=1
prune<-sample(which(!is.na(eta[,2]))[-1],1)
k[i,1]<-prune
l<-1
j<-2
while(!is.na(eta[k[i,l],2])) {
  l<-l+1
  k[i,l]<-which(as.numeric(eta[,3])==k[i,l-1])[1]
  l<-l+1
  k[i,l]<-which(as.numeric(eta[,3])==k[i,l-2])[2]
  j<-l+1
}
k[i,j]<-prune
while(!is.na(eta[k[i,j],2])) {
  j<-j+1
  k[i,j]<-which(as.numeric(eta[,3])==k[i,j-1])[1]
  j<-j+1
  k[i,j]<-which(as.numeric(eta[,3])==k[i,j-1])[1]
  j<-j+1
  k[i,j]<-which(as.numeric(eta[,3])==k[i,j-2])[2]
}
eta[c(k[i,])[-c(which(k[i,]==prune))],]<-NA
eta
head(k)
@

this doesn't work
<<>>=
#putting them together
num.sims<-10
alpha<-.5
mu<-mean(y)
nu<-10
lambda<-4
eta<-matrix(NA,nrow=50,ncol=4)
eta[1,1]<-1
m<-seq(min(x1)+1,max(x1)-1,1)
n<-c("A,B","C,D")
#grow
rho<-NULL
node<-NULL
#set.seed(2)
k<-matrix(NA,ncol=num.sims,nrow=50)

for(i in 1:10){
  rand<-runif(1)
  if(rand<=alpha){
    node[i]<-sample(which(!is.na(eta[,1]) & is.na(eta[,2]) & is.na(eta[,4])),1) #node to split
    eta[which(is.na(eta[,1]))[1],3]<-node[i] #assign parent
    eta[which(is.na(eta[,1]))[1],1]<-which(is.na(eta[,1]))[1] #initiallize node (left)
    eta[which(is.na(eta[,1]))[1],3]<-node[i] #assign parent
    eta[which(is.na(eta[,1]))[1],1]<-which(is.na(eta[,1]))[1] #initiallize node (right)
    if(is.na(eta[1,2])) {
      rho[i]<-Discretesample2(1,n)
      eta[node[i],2]<-rho[i]
    }
    if(node[i]==2 | node[i]==3) {
      rho[i]<-Discretesample1(1,m)
      eta[node[i],2]<-rho[i]
    }
    if(node[i]!=2 & node[i]!=3 & node[i]!=1) {
      w<-as.numeric(eta[as.numeric(eta[node[i],3]),2])
      rho[i]<-Discretesample1(1,m)
      if(node[i]%%2==1) {
        while(as.numeric(rho[i])<w) {
          rho[i]<-Discretesample1(1,m)
        }
      }
      if(node[i]%%2==0) {
        while(as.numeric(rho[i])>=w) {
          rho[i]<-Discretesample1(1,m)
        }
      }
      eta[node[i],2]<-rho[i]
    }
    if(node[i]!=1) {
      if(as.numeric(eta[node[i],2])==max(m)) {
        eta[which(eta[,3]==node[i])[2],4]<-1
      }
      if(as.numeric(eta[node[i],2])==min(m)) {
        eta[which(eta[,3]==node[i])[1],4]<-1
      }
    }
  }
  if(rand>.5 & !is.na(eta[3,1])) {
    prune<-sample(which(!is.na(eta[,2]))[-1],1)
    k[i,1]<-prune
    l<-1
    j<-2
    while(!is.na(eta[k[i,l],2])) {
      l<-l+1
      k[i,l]<-which(as.numeric(eta[,3])==k[i,l-1])[1]
      l<-l+1
      k[i,l]<-which(as.numeric(eta[,3])==k[i,l-2])[2]
      j<-l+1
    }
    k[i,j]<-prune
    while(!is.na(eta[k[i,j],2])) {
      j<-j+1
      k[i,j]<-which(as.numeric(eta[,3])==k[i,j-1])[1]
      j<-j+1
      k[i,j]<-which(as.numeric(eta[,3])==k[i,j-1])[1]
      j<-j+1
      k[i,j]<-which(as.numeric(eta[,3])==k[i,j-2])[2]
    }
    eta[c(k[i,])[-c(which(k[i,]==prune))],]<-NA
  }
}
eta
rho
node
k
@



Breast Cancer Data
<<>>=
#write.csv(read.csv("ftp://ftp.ics.uci.edu/pub/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data",header=FALSE),"breast-cancer-wisconsin.csv")
cancer<-read.csv("breast-cancer-wisconsin.csv")[,-1]
colnames(cancer)<-c("id","size","clump","shape","adhes","secs","bare","bland","normal","mitoses","class")
cancer$bare<-as.numeric(cancer$bare)
cancer$class<-as.factor(cancer$class)
cancer[!complete.cases(cancer),]
#examine corr structure
library(psych)
pairs.panels(cancer[,-c(1,11)])
library(corrplot)
M<-cor(cancer[,-c(1,11)])
corrplot.mixed(M,upper="ellipse")
#tenfold cross validation
library(caret)
y<-cancer$class
flds<-createFolds(y, k = 10, list = TRUE, returnTrain = FALSE)
names(flds)[1] <- "train"
@

\end{document}